// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "main.h"
#include<stdlib.h>
#include<stdio.h>

////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////  GLOBAL VARIABLES //////////////////////////////////////
CvHaarClassifierCascade* cascade_face = 0;//Stores the cascade of face
CvHaarClassifierCascade* cascade_eye = 0;//Stores the cascade of eye
CvHaarClassifierCascade* cascade_nose = 0;//Stores the cascade of nose

CvMemStorage* storage_face = 0;// Storage to store faces detected
CvMemStorage* storage_eye = 0;// Storage to store eyes detected
CvMemStorage* storage_nose = 0;// Storage to store nose detected


Fl_Text_Display *text1=(Fl_Text_Display *)0;
Fl_Scroll *Board=(Fl_Scroll *)0;
Fl_OpenCV *Pict=(Fl_OpenCV *)0;

bool playing;

IplImage *img; 
Fl_Capture Cap;



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void Exit_CB(Fl_Widget*,void*) 
{
      // Release the loaded Cascades
    cvReleaseHaarClassifierCascade(&cascade_face );
    cvReleaseHaarClassifierCascade(&cascade_eye );
    cvReleaseHaarClassifierCascade(&cascade_nose );
    
    // Release tha storage area 
    cvReleaseMemStorage( &storage_eye );
    cvReleaseMemStorage( &storage_face);
    cvReleaseMemStorage( &storage_nose);
  exit(0);
}
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
void main_window_exit_CB(Fl_Double_Window*, void*)
{
     // Release the loaded Cascades
    cvReleaseHaarClassifierCascade(&cascade_face );
    cvReleaseHaarClassifierCascade(&cascade_eye );
    cvReleaseHaarClassifierCascade(&cascade_nose );
    
    // Release tha storage area 
    cvReleaseMemStorage( &storage_eye );
    cvReleaseMemStorage( &storage_face);
    cvReleaseMemStorage( &storage_nose);
    
    exit(0);
}                                  
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

void Capture_CB(Fl_Button*, void*)
{
    fl_alert("Accpet if eyes are correctly located");
}

/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
void About_CB(Fl_Widget*,void*) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(447, 343, "About");
    w = o;
    o->box(FL_PLASTIC_UP_BOX);
    o->color((Fl_Color)16);
    
    /*{ 
     Fl_Text_Buffer *buff = new Fl_Text_Buffer();
     
     text1 = new Fl_Text_Display(20, 20, 410, 290);
     text1->buffer(buff);
     buff->text("This Project implements face authentication system\n"
     "using LBP histogram Matching and finding Chi Square Distance\n\n"
     "Project Mentor:- Aprajita Chowdhary\n\n"
     "TEAM Members:-\n"
     "Ritesh Ranjan\n"
     "Praveen Pandey\n"
     "Suman Samanta\n"
     "M J Kashyap");
  
    } // Fl_Text_Display* text1*/
     { 
        Info = new Fl_Browser(20, 20, 410, 290);
        Info->color((Fl_Color)31);
        Info->textcolor(4);
        Info->add("@c@b@i@l@C1 Face Recognition and");
        Info->add("@c@b@i@l@C1Authentication System ");
        Info->add("This Project implements face authentication system");
        Info->add("using LBP histogram Matching and finding Chi Square Distance");
        
        Info->add("@c@bC1 Project Mentor : Aprajita Chowdhary");
        Info->add("@b@C1TEAM Members:-");
        Info->add("Ritesh Ranjan");
        Info->add("Praveen Pandey");
        Info->add("Suman Samanta");
        Info->add("M J Kashyap");
      }
    o->end();
  } // Fl_Double_Window* o
  w->show();
  w->redraw();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int main(int argc, char **argv) {
  
  int i=load_casades();
  
  if(i==-1)
  {
           fl_alert("Program Terminated");
           exit(1);
  }
  
  	

  
  Fl_Double_Window* w;
 
  { Fl_Double_Window* o = new Fl_Double_Window(856, 621, "Face Authentication System");
    w = o;
    
    { Board = new Fl_Scroll(5, 10, 460, 340);
      Board->box(FL_EMBOSSED_FRAME);
      Board->color((Fl_Color)23);
      Pict=new Fl_OpenCV(10,15,450,330);
      Board->add(Pict);
      Pict->FitWindows();
      Board->end();
      OpenCAM_CB();
      Board->redraw();
    } // Fl_Scroll* Board
    
    
    o->callback((Fl_Callback*)main_window_exit_CB);
    
    { Fl_Button* o = new Fl_Button(720, 80, 100, 60, "Train Face");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Exit_CB);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(720, 190, 100, 60, "Authenticate");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Exit_CB);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(720, 310, 100, 60, "Exit");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Exit_CB);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(725, 410, 100, 60, "About");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)About_CB);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(25, 425, 175, 35, "Capture Face Form Cam");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Capture_CB);
    } // Fl_Button* o
    o->end();
  } // Fl_Double_Window* o
  w->show(argc, argv);
  
      
  return Fl::run();
}
////////////////////////////////////////////////////
void OpenCAM_CB() {
  if(!Cap.CaptureFromCAM(-1)) return;

Pict->SetImage(Cap.GetFrame());
Board->redraw();
playing=true;
Fl::add_timeout(0.05, Playing_CB);

}

//////////////////////////////////////////////////////
void Playing_CB(void*) {
  if(playing==false) return;
img=Cap.GetFrame();
// detect_and_draw();
img=detect_and_draw(img);
Pict->SetImage(img);
Board->redraw();
Fl::wait(0);
Fl::add_timeout(0.01, Playing_CB);
}


//////////////////////////////////////////////////////////
IplImage* detect_and_draw( IplImage* img )
{

    // This is used to scale down the image
	double scale = 2;
    

	// create a gray image same sized to that of image
    IplImage* gray = cvCreateImage( cvSize(img->width,img->height), 8, 1 );
    
	// Create scaled down image of the frame by a scale of "scale" value
	IplImage* small_img = cvCreateImage( cvSize( cvRound (img->width/scale),cvRound (img->height/scale)),8, 1 );
    
	// convert the image to gray scale
    cvCvtColor( img, gray, CV_BGR2GRAY );
    
	//copy the resize gray image to small_img variable
	cvResize( gray, small_img, CV_INTER_LINEAR );
    
	// Increase contrast by equlising histogram of image
	cvEqualizeHist( small_img, small_img );
    
	// Clear the storage memory area used to store detected faces
	cvClearMemStorage( storage_face);

    if( cascade_face )
    {
   
        /////////////////////////////////// Function discrption //////////////////////////////
		

		CvSeq* faces = cvHaarDetectObjects( small_img, cascade_face, storage_face,
                                            1.1, 2, 0,
                                            cvSize(100,100) );
        
        
		
		for( int i = 0; i < (faces ? faces->total : 0); i++ )
        {
            CvRect r = *(CvRect*)cvGetSeqElem( faces, i );
    		
			// Draw rectangle around face
			cvRectangle( img, cvPoint((int)(r.x*scale),(int)(r.y*scale) ),cvPoint( (int)((r.x+r.width)*scale),(int)((r.y+r.height)*scale) ),CV_RGB(0,255,0), 3 );
			
		}
    }

        
	cvReleaseImage( &gray );
    cvReleaseImage( &small_img );
    return img;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

int load_casades()
{
    
    
    const char* cascade_name_face ="haar_cascades\\haarcascade_face.xml";//Path of cascade of face
    const char* cascade_name_eye ="haar_cascades\\haarcascade_eye1.xml";//Path of cascade of eye
    const char* cascade_name_nose ="haar_cascades\\haarcascade_nose.xml";//Path of cascade of nose
    
    cascade_face = (CvHaarClassifierCascade*)cvLoad( cascade_name_face, 0, 0, 0 );
	cascade_eye = (CvHaarClassifierCascade*)cvLoad( cascade_name_eye, 0, 0, 0 );
	cascade_nose = (CvHaarClassifierCascade*)cvLoad( cascade_name_nose, 0, 0, 0 );
    	
	// If any cascade cannot be loaded the print error and exit
	if( !cascade_face )
    {
        fl_alert("ERROR: Could not load classifier of face  cascade form \"haar_cascades\" folder" );
        return -1;
    }

	if( !cascade_eye )
    {
        fl_alert("ERROR: Could not load classifier of eye cascade form \"haar_cascades\" folder" );
        return -1;
    }

	if( !cascade_nose )
    {
        fl_alert("ERROR: Could not load classifier of nose cascade form \"haar_cascades\" folder" );
        return -1;
    }
    
    // Create memory storage for storing detected objects
	storage_face = cvCreateMemStorage(0);
    storage_eye = cvCreateMemStorage(0);
	storage_nose = cvCreateMemStorage(0);
}
