// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "main.h"
#include "Face_detection.h"
#include "Face_authentication.h"
//#include "File.h"

////////////////////////////////////////////////////////////////////////////////
///////////////////////  GLOBAL VARIABLES //////////////////////////////////////
IplImage *face_result_rotated=0,*face_result_color=0,*face_result_gray=0,*img=0;
IplImage *user_face[10];

Fl_Double_Window* train_window=(Fl_Double_Window*)0;
Fl_Double_Window* authenticate_window=(Fl_Double_Window*)0;
Fl_Double_Window* about_window=(Fl_Double_Window*)0;
Fl_Double_Window* help_window=(Fl_Double_Window*)0;

Fl_Text_Display *text1=(Fl_Text_Display *)0;
Fl_Text_Display *heading=(Fl_Text_Display *)0;
Fl_Text_Buffer *heading_buff=(Fl_Text_Buffer *)0;
Fl_Button *train_button=(Fl_Button *)0;
Fl_Button *authenticate_button=(Fl_Button *)0;
Fl_Button *accept_button=(Fl_Button *)0;
Fl_Button *reject_button=(Fl_Button *)0;
Fl_Button *capture_button=(Fl_Button *)0;

Fl_Input *name_train=(Fl_Input *)0;
Fl_Input *name_authenticate=(Fl_Input *)0;
Fl_Scroll *Board=(Fl_Scroll *)0;
Fl_OpenCV *Pict=(Fl_OpenCV *)0;
Fl_OpenCV *face_color,*face_gray,*face_rotated;

bool playing=true,training_mode=false,authentication_mode=false;
bool recognition_mode=false; 
int pict_no=0;
Fl_Capture Cap;

char name[256];
char *HEADING_TIP="Select a mode of operation";

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void Train_CB(Fl_Widget*,void*) 
{
    playing=false;
    training_mode=true;
    authentication_mode=false;
    recognition_mode=false;
    
    char show_text[256];
    sprintf(show_text,"         TRAINING MODE");
    heading_buff->text(show_text);
    authenticate_button->deactivate();
    train_button->deactivate();
    capture_button->activate();    

  { Fl_Double_Window *o = new Fl_Double_Window(650, 356, "Train face");
    train_window= o;
    o->selection_color((Fl_Color)128);
    o->labelsize(16);
    o->callback((Fl_Callback*)train_window_exit_CB);
    { Fl_Button* o = new Fl_Button(380, 300, 135, 30, "Submit");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)91);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)submit_train_CB);
    } // Fl_Button* o
    
    { name_train = new Fl_Input(190, 297, 140, 38, "ENTER NAME FOR USER");
      name_train->color((Fl_Color)246);
      name_train->labeltype(FL_EMBOSSED_LABEL);
      name_train->labelfont(9);
      name_train->labelcolor(FL_GRAY0);
      name_train->callback((Fl_Callback*)submit_train_CB);
      name_train->index(1);
    } // Fl_Input* o
    
    { Fl_Text_Display* o = new Fl_Text_Display(10, 35, 625, 245, "INSTRUCTIONS FOR TRAINING SYSTEM FOR A FACE");
      o->box(FL_PLASTIC_UP_FRAME);
      o->color((Fl_Color)26);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->textfont(FL_HELVETICA);
      o->textsize(14);
      Fl_Text_Buffer *buff = new Fl_Text_Buffer();
      o->buffer(buff);
      buff->text("1. To Train system to recognise your face 10 pictures of your face will be saved.\n\n"
      "2. The trainign starts with first giving name of the user.\n\n"
      "3. After entering the name press submit button or press enter.\n\n"
      "4. Now you can see that Capture face from web cam button is enabled.\n\n"
      "5. Extract and process your face by pressing Caputure button.\n\n"
      "6. If eyes are correctly located and you are satisfied press \"Accept\" button.\n\n"
      "7. If you are not satisfied capture the face again by pressin \"capture\" button.\n\n"
      "8. In the top text area you will see the picture no you have saved.\n\n"
      "9. After completion of training you will see a message.");
   } // Fl_Text_Display* o
    o->end();
  } // Fl_Double_Window* o
  train_window->show();
  train_window->redraw();
}
/////////////////////// callback for authenticate button ///////////////////
////////////////////////////////////////////////////////////////////////////
void Authenticate_CB(Fl_Widget*,void*) 
{
    playing=false;
    training_mode=false;
    recognition_mode=false;
    authentication_mode=true;
    heading_buff->text("         AUTHENTICATION MODE");
    
    
   { Fl_Double_Window* o = new Fl_Double_Window(650, 356, "Authenticate face");
    authenticate_window = o;
    o->selection_color((Fl_Color)128);
    o->labelsize(16);
    o->callback((Fl_Callback*)authenticate_window_exit_CB);
    { Fl_Button* o = new Fl_Button(380, 300, 135, 30, "Submit");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)91);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)submit_authenticate_CB);
        
    } // Fl_Button* o
    
    { name_authenticate = new Fl_Input(190, 297, 140, 38, "ENTER NAME FOR USER");
      name_authenticate->color((Fl_Color)246);
      name_authenticate->labeltype(FL_EMBOSSED_LABEL);
      name_authenticate->labelfont(9);
      name_authenticate->labelcolor(FL_GRAY0);
      name_authenticate->callback((Fl_Callback*)submit_authenticate_CB);
      name_authenticate->index(1);
    } // Fl_Input* o
    
    { Fl_Text_Display* o = new Fl_Text_Display(10, 35, 625, 245, "INSTRUCTIONS FOR AUTHENTICATION");
      o->box(FL_PLASTIC_UP_FRAME);
      o->color((Fl_Color)26);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->textfont(FL_HELVETICA);
      o->textsize(14);
      Fl_Text_Buffer *buff = new Fl_Text_Buffer();
      o->buffer(buff);
      buff->text("1. To authenticate your face enter you name.\n\n"
      "2. In the top you will see that system is in authentication mode.\n\n"
      "3. Capture your face by pressing capture buton.\n\n"
      "4. If eyes are correctly located and you are satisfied press \"Accept\" button.\n\n"
      "5. If you are not satisfied capture the face again by pressin \"capture\" button.\n\n"
      "6 If you face matches with database you will see message \"FACE AUTHENTICATED\\n\n");
   } // Fl_Text_Display* o
    o->end();
  } // Fl_Double_Window* o
  //train_button->deactivate();
   capture_button->activate();     
 
  authenticate_window->show();
  authenticate_window->redraw();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////Recognition Callback ///////////////////////////
void Recognition_CB(Fl_Widget*,void*) 
{
  capture_button->activate();  
  training_mode=false;
  authentication_mode=false;
  recognition_mode=true;
  heading_buff->text("       RECOGNITION MODE");
}

////////////////////////////////////////////////////////////////////////////////
void About_CB(Fl_Widget*,void*) {
  
  playing=false;
  //Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(650, 356, "About");
    about_window = o;
    o->callback((Fl_Callback*)about_window_exit_CB);
    o->box(FL_PLASTIC_UP_BOX);
    o->color((Fl_Color)16);
    { 
      Fl_Text_Display* o = new Fl_Text_Display(10, 35, 625, 245, "PROJECT MEMBERS AND MENTOR");
      o->box(FL_PLASTIC_UP_FRAME);
      o->color((Fl_Color)26);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->textfont(FL_HELVETICA);
      o->textsize(14);
      Fl_Text_Buffer *buff = new Fl_Text_Buffer();
      o->buffer(buff);
      buff->text("This Project implements face authentication system\n"
     "using LBP histogram Matching and finding Chi Square Distance\n\n"
     "Project Mentor:- Aprajita Chowdhary\n\n"
     "TEAM Members:-\n"
     "Ritesh Ranjan CSE\n"
     "Praveen Pandey CSE\n"
     "Suman Samanta CSE\n"
     "M J Kashyap CSE");
      }
    o->end();
  } // Fl_Double_Window* o
  about_window->show();
  about_window->redraw();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Help_CB(Fl_Widget*,void*) {
  
  playing=false;
  //Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(650, 356, "HELP");
    help_window = o;
    o->callback((Fl_Callback*)help_window_exit_CB);
    o->box(FL_PLASTIC_UP_BOX);
    o->color((Fl_Color)16);
    { 
      Fl_Text_Display* o = new Fl_Text_Display(10, 35, 625, 245, "How to use");
      o->box(FL_PLASTIC_UP_FRAME);
      o->color((Fl_Color)26);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      Fl_Text_Buffer *buff = new Fl_Text_Buffer();
      o->buffer(buff);
      buff->text("This Project implements face authentication system\n"
     "using LBP histogram Matching and finding Chi Square Distance.\n\n"
     "System works in Three mode \n"
     "1.TRAINING MODE  2.AUTHENTICATION MODE. 3.RECOGNITION MODE \n"
     "  -In TRAINING MODE system is trained to recognise your face.\n"  
     "  -In AUTHENTICATION MODE system recognises your face against your name.\n"
     "  -In RECOGNITION MODE system recogisises your face against all users in database\n"
     "---------TIPS FOR GOOD TRAINING OF YOUR FACE-------------\n" 
     "1. Select good pictures in correct pose of yor face.\n"
     "2. Try to have few differnt pose but it should be natural.\n"
     "3. Don't train in very low contrast or in very low brightness conditions.\n");
      }
    o->end();
  } // Fl_Double_Window* o
  help_window->show();
  help_window->redraw();
}

////////////////////// callbacks for train windows /////////////////////
void submit_train_CB(Fl_Widget*,void*) 
{
     if(strlen(name_train->value())==0)
     {
       fl_alert("Please enter name");
       return;
     }
     strcpy(name,name_train->value());
     if( find_user( name ) )
     {
        fl_alert("USER EXITS!");
     }
     else
     {           
         char cmd[256];
         sprintf(cmd,"mkdir %s",name);
         system(cmd);
         //add_user(name);
         //fl_message("User Added \"%s\".",name);
         train_window->hide();
         playing=true;
         Fl::add_timeout(0.05, Playing_CB);
         
     }
     
}
////////////////////////////////////////////////////////////////////////////////
////////////////////// callbacks for Authenticate windows //////////////////////
void submit_authenticate_CB(Fl_Widget*,void*) 
{
     
     if(strlen(name_authenticate->value())==0)
     {
       fl_alert("Please enter name");
        return;
     }
     strcpy(name,name_authenticate->value());
     if(!find_user( name ))
     {
        fl_alert("User doesnot exits");
        return;
     }
   
     
     char file_name[256];
     for(int i=0;i<10;i++)
     {
         sprintf(file_name,"%s\\img%d.jpg",name,i);
         user_face[i]=cvLoadImage(file_name,-1);
         if(user_face[i]==0)
         {
           fl_message("Face data for User %s not found");
           break;
         }
     }
     fl_message("User data loaded for %s. Now capture face and accept to authenticate",name);      
     
     char ch[256];
     sprintf(ch,"    Authentication mode for \"%s\"",name);
     heading_buff->text(ch);    
     playing=true;
     Fl::add_timeout(0.05, Playing_CB);
     authenticate_window->hide();
} 
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Capture_CB(Fl_Button*, void*)
{
    playing=false;
    if( cutface_and_save( img,&face_result_color,&face_result_gray,&face_result_rotated ) )
    {
     face_color->FitWindows();
     face_color->SetImage(face_result_color);
     face_color->redraw();
     
     face_gray->FitWindows();
     face_gray->SetImage(face_result_gray);
     face_gray->redraw();
     
     face_rotated->FitWindows();
     face_rotated->SetImage(face_result_rotated);
     face_rotated->redraw();
     accept_button->activate();
     reject_button->activate();
     capture_button->deactivate();
    }
    else{
         playing=true;
         Fl::add_timeout(0.05, Playing_CB);
    }

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Accept_CB(Fl_Button*, void*)
{
   accept_button->deactivate();
   reject_button->deactivate();
   playing=false;
   
   if(training_mode)
   {
       char file_name[256];
       if(fl_choice("Eyes are correctly located","NO","YES",NULL))
       {
           IplImage *lbp_img=0;
           lbp_img=cvCreateImage(cvSize(120,140),8,1);
           lbp_operator(face_result_rotated,&lbp_img);
           sprintf(file_name,"%s\\img%d.jpg",name,pict_no); 
           pict_no++; 
           cvSaveImage(file_name,lbp_img);
           fl_message("Image saved. You have to accept %d more images",10-pict_no);
           cvReleaseImage(&lbp_img);
       
       }
       if(pict_no==10)
       {
         pict_no=0;
         fl_message("Your Faces have been saved. Now you can authenticate your face");
      
       train_button->activate();   
       authenticate_button->activate();
       add_user(name);
       fl_message("User added %s ",name);
       }
    char ch[256];
    sprintf(ch,"Training system for \"%s\" Pic no=%d",name,pict_no);    
    heading_buff->text(ch);
    
    
   }
   else if(authentication_mode)
   {
        double val=0,val2=0,min=100000,min2=1000000000;
        if(fl_choice("Eyes are correctly located","NO","YES",NULL))
       {
           IplImage *user_img=0;
           user_img=cvCreateImage(cvSize(120,140),8,1);
           lbp_operator(face_result_rotated,&user_img);
           for(int i=0;i<10;i++)
           {
            val=2*lbp_diff(user_img,user_face[i]);
            val2= face_template_match( user_img,user_face[i] );
            if(val<min) 
			min=val;
	      	if(val2<min2)
    		min2=val2;
           }
          min=min/1000;
          min2=min2/10000000;
          
          if(min+min2<43)
            fl_message("Welcome \"%s\"",name);
          else
            fl_alert("Access denied!");     
          
          cvReleaseImage(&user_img);
       
       }//end if
  
   }
   else if(recognition_mode)
   {
        Fl_Double_Window* w;
        Fl_Progress* prog_bar;
        Fl_Text_Buffer *buff;
      { Fl_Double_Window* o = new Fl_Double_Window(460, 178, "Recognition");
        w = o;
        o->callback((Fl_Callback*)recognition_win_exit_CB,w);
            { Fl_Text_Display* o = new Fl_Text_Display(30, 110, 410, 50, "RECOGNISING YOUR FACE");
              o->box(FL_PLASTIC_DOWN_BOX);
              o->color((Fl_Color)247);
              o->selection_color((Fl_Color)55);
              o->labeltype(FL_ENGRAVED_LABEL);
              o->labelsize(17);
              o->textfont(FL_COURIER_BOLD);
              o->textsize(16);
              o->textcolor(FL_BLACK);
              buff = new Fl_Text_Buffer();
              o->buffer(buff);
              buff->text("MATCHNING face with database...");
            } // Fl_Text_Display* o
            { Fl_Progress* o = new Fl_Progress(30, 35, 400, 35, "processing data");
              prog_bar=o;
              o->box(FL_PLASTIC_DOWN_BOX);
              o->color((Fl_Color)55);
              o->selection_color((Fl_Color)176);
              } // Fl_Progress* o
            o->end();
        } // Fl_Double_Window* o
        w->show();
        
        
        int n=find_user_no();
        int user_no;
        IplImage *data_face[10];
        char user[256],file_name[256];
        double val_min=10000;
        
        IplImage *current_face=0;
        current_face=cvCreateImage(cvSize(120,140),8,1);
        lbp_operator(face_result_rotated,&current_face);
        
        
        prog_bar->minimum(0);
        prog_bar->maximum(n*10);
        
        for(int i=1;i<=n;i++)
        {
          double val=0,val2=0,min=100000,min2=1000000000;
          next_user(user,i);
          // loading 10 images of database
              for(int k=0;k<10;k++)
              {
                 sprintf(file_name,"%s\\img%d.jpg",user,k);
                 data_face[k]=cvLoadImage(file_name,-1);
                 if(data_face[k]==0)
                 {
                   fl_message("Face data for User %s not found");
                   break;
                 }
               }//
           
           
           // find difference
           for(int j=0;j<10;j++)
           {
            val=2*lbp_diff(current_face,data_face[j]);
            val2= face_template_match( current_face,data_face[j] );
            if(val<min) 
			min=val;
	      	if(val2<min2)
    		min2=val2;
                         
           
           }
          min=min/1000;
          min2=min2/10000000;
          if((min+min2)<val_min)
          {
            val_min=min+min2;
            user_no=i;
          }
          
       
       for(int l=0;l<10;l++)
       cvReleaseImage(&data_face[l]);
       prog_bar->value(i*10);
       Fl::check();
      }// end for
       
       buff->text("Result - \n");
       if(val_min<45)
       {
         next_user(user,user_no);
         char ch[256];
         sprintf(ch,"Face matches with -- \"%s\" --",user);
         buff->append(ch);
       }
       else
         buff->append("Cannot recognise user!");            
         
       cvReleaseImage(&current_face);
   
   
  }// end else if
 
  if(!recognition_mode)
  {
      capture_button->activate();
      playing=true;
      Fl::add_timeout(0.05, Playing_CB);
   }
}
////////////////////////////////////////////////////////////////////////////////
///////////////////// Call back for exit of recogniton window //////////////////
void recognition_win_exit_CB(Fl_Double_Window*, void* data)
{
      Fl_Window *w = (Fl_Window*)data;    // access parent window
      w->hide();
      capture_button->activate();
      playing=true;
      Fl::add_timeout(0.05, Playing_CB);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Reject_CB(Fl_Button*, void*)
{
    accept_button->deactivate();
    reject_button->deactivate();
    capture_button->activate();
    playing=true;
    Fl::add_timeout(0.05, Playing_CB);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void train_window_exit_CB(Fl_Double_Window*, void*)
{
    playing=true;
    Fl::add_timeout(0.05, Playing_CB);
    train_window->hide();
    train_button->activate();
    authenticate_button->activate();
    training_mode=false;
    heading_buff->text(HEADING_TIP);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void authenticate_window_exit_CB(Fl_Double_Window*, void*)
{
     playing=true;
     Fl::add_timeout(0.05, Playing_CB);
     authenticate_window->hide();
     authenticate_button->activate();
     authentication_mode=false;
     heading_buff->text(HEADING_TIP);
  
}  
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void about_window_exit_CB(Fl_Double_Window*, void*)
{
    playing=true;
    Fl::add_timeout(0.05, Playing_CB);
    about_window->hide();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void help_window_exit_CB(Fl_Double_Window*, void*)
{
    playing=true;
    Fl::add_timeout(0.05, Playing_CB);
    help_window->hide();
}
                          
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void main_window_exit_CB(Fl_Double_Window*, void*)
{
   if(training_mode || (pict_no<10 && pict_no>0) )
   {
     playing=false;               
     if( fl_choice("Trainig not completed for current user.\n"
     "Images of current user will not be saved!\n"
     " Are you sure you want to exit?","YES","NO",NULL) )
     {
         playing=true;
         Fl::add_timeout(0.05, Playing_CB);
         return;
     }
     else
       delete_user(name);
       
    }
    release_cascades();
    exit(0);
    
}                                  

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int main(int argc, char **argv) {
  
  int i=load_casades();
  
  if(i==-1)
  {
      fl_alert("Program Terminated");
      exit(1);
  }

  Fl_Double_Window* w;
  
  { Fl_Double_Window* o = new Fl_Double_Window(856, 621, "Face Authentication System");
    w = o;
    
    o->callback((Fl_Callback*)main_window_exit_CB);
    { Board = new Fl_Scroll(5, 10, 460, 340);
      Board->box(FL_EMBOSSED_FRAME);
      Board->color((Fl_Color)23);
      Pict=new Fl_OpenCV(10,15,450,330);
      Board->add(Pict);
      Pict->FitWindows();
      Board->end();
      if(!OpenCAM_CB())
      {
          fl_message("Please plugin the webcam!\n"
          "1. Check the webcam port.\n"
          "2. Check that webcam driver is installed.");
          exit(1);
      }            
      Board->redraw();
    } // Fl_Scroll* Board
    
    // color face frame
    { Fl_Group* o = new Fl_Group(500, 75, 130, 150,"Color Face");
      o->box(FL_EMBOSSED_FRAME);
      o->color((Fl_Color)23);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->align(129);
      face_color=new Fl_OpenCV(505,80,130,150);
      face_color->FitWindows();
      o->end();
      o->redraw();
    } // Fl_Group* o
    
    // gray color face frame
    { Fl_Group* o = new Fl_Group(695, 75, 130, 150,"Gray Face");
      o->box(FL_EMBOSSED_FRAME);
      o->color((Fl_Color)23);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->align(129);
      face_gray=new Fl_OpenCV(700,80,130,150);
      face_gray->FitWindows();
      o->end();
      o->redraw();
    } // Fl_Group* o
    // rotated face frame
    { Fl_Group* o = new Fl_Group(590, 250, 130, 150,"Rotated Face");
      o->box(FL_EMBOSSED_FRAME);
      o->color((Fl_Color)23);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(9);
      o->labelsize(18);
      o->labelcolor(FL_GRAY0);
      o->align(129);
      face_rotated=new Fl_OpenCV(595,255,130,150);
      face_rotated->FitWindows();
      o->end();
      o->redraw();
    } // Fl_Group* o

    { train_button = new Fl_Button(20, 515, 100, 60, "Train Face");
      train_button->box(FL_PLASTIC_UP_BOX);
      train_button->down_box(FL_PLASTIC_DOWN_BOX);
      train_button->color((Fl_Color)132);
      train_button->selection_color((Fl_Color)131);
      train_button->callback((Fl_Callback*)Train_CB);
      train_button->tooltip("Train system to Recognise a face");
    } // Fl_Button* o
    
    { authenticate_button = new Fl_Button(155, 515, 100, 60, "Authenticate");
      authenticate_button->box(FL_PLASTIC_UP_BOX);
      authenticate_button->down_box(FL_PLASTIC_DOWN_BOX);
      authenticate_button->color((Fl_Color)132);
      authenticate_button->selection_color((Fl_Color)131);
      authenticate_button->callback((Fl_Callback*)Authenticate_CB);
      authenticate_button->tooltip("Authenticate a user by face");
    } // Fl_Button* o
    
    { Fl_Button* o = new Fl_Button(285, 515, 130, 60, "Recognise Person");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Recognition_CB);
      o->tooltip("Reconises the face of the person if the system is trained for that face");
    } // Fl_Button* o
    
    { Fl_Button* o = new Fl_Button(730, 515, 100, 60, "Exit");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)main_window_exit_CB);
      o->tooltip("Exit the application");
    } // Fl_Button* o
    
    { Fl_Button* o = new Fl_Button(455, 515, 100, 60, "Help");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)Help_CB);
      o->tooltip("Find how to use this application");
    } // Fl_Button* o
    
    { capture_button = new Fl_Button(145, 390, 175, 35, "Capture Face Form Cam");
      capture_button->box(FL_PLASTIC_UP_BOX);
      capture_button->down_box(FL_PLASTIC_DOWN_BOX);
      capture_button->color((Fl_Color)132);
      capture_button->selection_color((Fl_Color)131);
      capture_button->callback((Fl_Callback*)Capture_CB);
      capture_button->deactivate();
      capture_button->tooltip("Captures face form web cam\nIt is activated"
                             "'only in \nTraining mode' 'Authentication mode'"
                             " or Recognition mode");
      
    } // Fl_Button* o
    
    { Fl_Button* o = new Fl_Button(595, 515, 100, 60, "About");
      o->box(FL_PLASTIC_UP_BOX);
      o->down_box(FL_PLASTIC_DOWN_BOX);
      o->color((Fl_Color)132);
      o->selection_color((Fl_Color)131);
      o->callback((Fl_Callback*)About_CB);
      o->tooltip("Credits and Project members");
    } // Fl_Button* o
         
    { accept_button = new Fl_Button(500, 420, 130, 35, "Accept ");
      accept_button->box(FL_PLASTIC_UP_BOX);
      accept_button->down_box(FL_PLASTIC_DOWN_BOX);
      accept_button->color((Fl_Color)132);
      accept_button->selection_color((Fl_Color)131);
      accept_button->callback((Fl_Callback*)Accept_CB);
      accept_button->deactivate();
      accept_button->tooltip("Accept the processed Face\n If you are satisfied "
                             "else capture Face again");   
     }
     { reject_button = new Fl_Button(695, 420, 130, 35, "reject ");
      reject_button->box(FL_PLASTIC_UP_BOX);
      accept_button->down_box(FL_PLASTIC_DOWN_BOX);
      reject_button->color((Fl_Color)132);
      reject_button->selection_color((Fl_Color)131);
      reject_button->callback((Fl_Callback*)Reject_CB);
      reject_button->deactivate();
      reject_button->tooltip("Reject and take another snapshot of your face");   
     }
     { heading = new Fl_Text_Display(470, 15, 380, 40);
      heading->box(FL_PLASTIC_UP_FRAME);
      heading->color((Fl_Color)26);
      heading->textcolor(FL_BLACK);
      heading->textfont(FL_COURIER_BOLD);
      heading->textsize(17);
      heading_buff = new Fl_Text_Buffer();
      heading->buffer(heading_buff);
      heading_buff->text(HEADING_TIP);
     } // Fl_Text_Display* 
    o->end();
   
  } // Fl_Double_Window* o

  w->show(argc, argv);
    
  return Fl::run();
}
////////////////////////////////////////////////////
bool OpenCAM_CB() {
  if(!Cap.CaptureFromCAM(-1)) 
   return false;

    Pict->SetImage(Cap.GetFrame());
    Board->redraw();
    playing=true;
    Fl::add_timeout(0.05, Playing_CB);
    return true;

}

////////////////////////////////////////////////////////////////////////////////
void Playing_CB(void*) {
  if(playing==false) 
    return;
    
    img=Cap.GetFrame();
    img=detect_and_draw(img);
    Pict->SetImage(img);
    Board->redraw();
    Fl::wait(0);
    Fl::add_timeout(0.01, Playing_CB);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//            FUNCTIONS FOR FILE OPERATION 
//
////////////////////////////////////////////////////////////////////////////////
int find_user(char *user_input)
{
    FILE *fp;
    char ch;
    char user[256];
    int flag=0;
    fp=fopen("users.ini","r");
    if(fp==NULL)
    {
      fl_alert(" file users.ini not found");
    }
     
    while(ch!=EOF)
    {
       int i=0;
       while(1)
       {
	ch=fgetc(fp);
	if(ch=='\n' || ch==EOF)
	{
	  user[i++]='\0';
	  break;
	 }

	  user[i++]=ch;
	}
	if(!strcmp(user,user_input))
	{
	  fclose(fp);
	  return 1;
    }
	else
	  flag=0;
    }
		fclose(fp);
       return flag;

}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int add_user(char *user_input)
{
    FILE *fp;
     int num=0;
    fp=fopen("users.ini","a");

    if(fp==NULL)
    {
      fl_alert(" file users.ini not found");
      return 0;
    }
    fseek(fp,0,SEEK_END);
    fputs(user_input,fp);
    fputs("\n",fp);
    fclose(fp);
     
    fp=fopen("data.ini","r+");
    if(fp==NULL)
    {
      fl_alert(" file data.ini not found");
      return 0;
    }

    fscanf(fp,"%d",&num);
    num++;
    fclose(fp);
    fp=fopen("data.ini","w");
    fprintf(fp,"%d",num);
    fclose(fp);

    return 1;

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int next_user(char *user_output,int num)
{
    FILE *fp;
    char ch;
    char user[256];
    int user_num=0;
    fp=fopen("users.ini","r");
    if(fp==NULL)
    {
      fl_alert(" file users.ini not found");
    }
     
    while(ch!=EOF)
    {
       int i=0;
       while(1)
       {
    	ch=fgetc(fp);
    	if(ch=='\n' || ch==EOF)
    	{
    	  user[i++]='\0';
    	  user_num++;
    	  break;
    	 }
    
    	  user[i++]=ch;
    	}
    	if(user_num==num)
    	{
    	  strcpy(user_output,user);
    	  fclose(fp);
    	  return 1;
        }
     }

     fclose(fp);
     return 0;

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int find_user_no()
{
    FILE *fp;
    int num;
    fp=fopen("data.ini","r+");
    if(fp==NULL)
    {
      fl_alert(" file data.ini not found");
      return -1;
    }

    fscanf(fp,"%d",&num);
    fclose(fp);
    return num;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void delete_user(char *user_name)
{
    char cmd[256];
    int num;
    sprintf(cmd,"rmdir /s /q %s",user_name);
    system(cmd);

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
